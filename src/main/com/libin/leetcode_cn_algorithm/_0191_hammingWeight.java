package libin.leetcode_cn_algorithm;

/**
 * Copyright (c) 2021/4/12. libin Inc. All Rights Reserved.
 * Authors: libin <libin>
 * <p>
 * Purpose : 191. 位1的个数
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 * 提示：
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 * 示例 1：
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 示例 3：
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 * 提示：
 * 输入必须是长度为 32 的 二进制串 。
 */
public class _0191_hammingWeight {
	/**
	 * 解题思路1：
	 * 我们可以直接循环检查给定整数 n 的二进制位的每一位是否为 1。
	 * 具体代码中，当检查第i位时，我们可以让n与2^i进行与运算，当且仅当n的第i位为1时，运算结果不为0。
	 */
	public int hammingWeight(int n) {
		int count = 0;
		for (int i = 0; i < 32; i++) {
			if ((n & (1 << i)) != 0) {
				count++;
			}
		}
		return count;
	}

	/**
	 * 解题思路2：
	 * 观察这个运算：n&(n - 1)，其运算结果恰为把n的二进制位中的最低位的1变为0之后的结果。
	 * <p>
	 * 如：6&(6-1) = 4, 6 = (110)2, 4 = (100)2   6 & (6−1)=4,6=(110)2,4=(100)2
	 * 运算结果 44 即为把 66 的二进制位中的最低位的 11 变为 00 之后的结果。
	 * 这样我们可以利用这个位运算的性质加速我们的检查过程，在实际代码中，我们不断让当前的n与n-1做与运算，直到n变为0即可。
	 * 因为每次运算会使得n的最低位的1被翻转，因此运算次数就等于n的二进制位中1的个数。
	 */
	public int hammingWeight2(int n) {
		int count = 0;
		while (n != 0) {
			n &= (n - 1);
			count++;
		}
		return count;
	}
}
